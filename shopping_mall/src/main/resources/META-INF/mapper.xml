<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis.AdminMapper">

    <select id="adminIdCheckMapper" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM admin_info WHERE admin_id = #{id}
    </select>
    
	<insert id="createAdminMapper">
	    INSERT INTO admin_info (admin_id, admin_pw, admin_name, admin_email, admin_tel, admin_part, admin_position, join_date)
	    VALUES (#{admin_id}, #{admin_pw}, #{admin_name}, #{admin_email}, #{admin_tel}, #{admin_part}, #{admin_position}, now())
	</insert>
	
	<select id="getAdminMapper" resultType="Map">
		SELECT *, DATE_FORMAT(join_date, '%Y-%m-%d') AS formatted_join_date FROM admin_info WHERE admin_id != 'master';
	</select>
	
	<select id="adminLoginMapper" parameterType="String" resultType="Map">
		SELECT admin_pw, permission FROM admin_info WHERE admin_id = #{id}
	</select>
	
	<select id="getAdminDetail" parameterType="String" resultType="model.AdminAuthentication">
		SELECT admin_id, admin_pw, permission FROM admin_info WHERE admin_id = #{id}
	</select>
    
    <select id="getAdminNameMapper" parameterType="String" resultType="String">
    	SELECT admin_name FROM admin_info WHERE admin_id = #{id}
    </select>
    
    <update id="modifyPermissionMapper">
    	UPDATE admin_info SET permission=
    	<choose>
    	<when test="status==1">
    		'N'
    	</when>
    	<when test="status==2">
    		'Y'
    	</when>
    	</choose>
    	 WHERE idx_admin=#{idx_admin} 
    </update>
    
    <insert id="insertSiteSettingMapper" parameterType="model.SettingSiteEntity">
	    INSERT INTO setting_site 
	    (admin_id, site_name, admin_email, point_usable, reward, auth_level, in_date) 
	    VALUES 
	    (#{admin_id}, #{site_name}, #{admin_email}, #{point_usable}, #{reward}, #{auth_level}, now())
	</insert>

    <insert id="insertCompanySettingMapper" parameterType="model.SettingCompanyEntity">
	    INSERT INTO setting_company 
	    (admin_id, company_name, business_number, ceo_name, ceo_tel, report_number, carrier_number, company_post, company_address, info_manager, info_manager_email, in_date) 
	    VALUES 
	    (#{admin_id}, #{company_name}, #{business_number}, #{ceo_name}, #{ceo_tel}, #{report_number}, #{carrier_number}, #{company_post}, #{company_address}, #{info_manager}, #{info_manager_email}, now())
	</insert>

    <insert id="insertPaymentSettingMapper" parameterType="model.SettingPaymentEntity">
	    INSERT INTO setting_payment 
	    (admin_id, bank_name, account_number, credit_card_usable, mobile_payment_usable, book_coupon_usable, min_point, max_point, receipt_usable, delivery_company, delivery_fee, delivery_date_usable, in_date) 
	    VALUES 
	    (#{admin_id}, #{bank_name}, #{account_number}, #{credit_card_usable}, #{mobile_payment_usable}, #{book_coupon_usable}, #{min_point}, #{max_point}, #{receipt_usable}, #{delivery_company}, #{delivery_fee}, #{delivery_date_usable}, now())
	</insert>
	
	<select id="getShopSettingMapper" resultType="model.AllSettingEntity">
		SELECT * FROM admin_settings where admin_id=#{id}
	</select>
	
	<update id="saveSiteSettingMapper">
		UPDATE setting_site
        SET
            site_name = #{site_name},
            admin_email = #{admin_email},
            point_usable = #{point_usable},
            reward = #{reward},
            auth_level = #{auth_level},
            in_date = NOW()
        WHERE
            admin_id = #{admin_id}
	</update>

	<update id="saveCompanySettingMapper">
		UPDATE setting_company
	    SET
	        company_name = #{company_name},
	        business_number = #{business_number},
	        ceo_name = #{ceo_name},
	        ceo_tel = #{ceo_tel},
	        report_number = #{report_number},
	        carrier_number = #{carrier_number},
	        company_post = #{company_post},
	        company_address = #{company_address},
	        info_manager = #{info_manager},
	        info_manager_email = #{info_manager_email},
	        in_date = NOW() 
	    WHERE
	        admin_id = #{admin_id}
	</update>
	<update id="savePaymentSettingMapper">
		UPDATE setting_payment
        SET
            bank_name = #{bank_name},
            account_number = #{account_number},
            credit_card_usable = #{credit_card_usable},
            mobile_payment_usable = #{mobile_payment_usable},
            book_coupon_usable = #{book_coupon_usable},
            min_point = #{min_point},
            max_point = #{max_point},
            receipt_usable = #{receipt_usable},
            delivery_company = #{delivery_company},
            delivery_fee = #{delivery_fee},
            delivery_date_usable = #{delivery_date_usable},
            in_date = NOW()
        WHERE
            admin_id = #{admin_id}
	</update>
	
	<insert id="createCategoryMapper" parameterType="dto.CategoryDto">
		INSERT INTO category VALUES('0', #{admin_id}, #{sort_code}, #{menu_code}, #{menu_name}, #{category_usable}, now());
	</insert>
	
	<select id="getCategoryMapper" resultType="Map">
		SELECT idx_category, sort_code, menu_code, menu_name, category_usable 
	    FROM category 
	 	WHERE admin_id = #{admin_id}
	 	<if test="search != null and search != ''">
	   		AND menu_name LIKE CONCAT('%', #{search}, '%')
	  	</if>
	  	ORDER BY idx_category DESC
	  	LIMIT #{firstIndex}, #{pagingNumber}
	</select>

	<delete id="deleteCategoryMapper">
		DELETE FROM category WHERE idx_category IN
		<foreach item="idx" collection="list" open="(" separator="," close=")">
			#{idx}
		</foreach>
	</delete>
	
	<select id="getCategoryMenuMapper" resultType="model.CategoryMenuEntity">
		SELECT menu_code, menu_name FROM category WHERE admin_id=#{id};
	</select>
	
	<select id="checkCodeMapper" parameterType="String" resultType="int">
		SELECT * FROM product WHERE product_code = #{code}
	</select>
	
	<insert id="createProductMapper" parameterType="model.ProductEntity">
		INSERT INTO product VALUES('0', #{admin_id}, #{menu_code}, #{menu_sort}, #{product_code}, #{product_name}, #{product_info}, 
		#{product_price}, #{product_discount_rate}, #{product_discount_price}, #{product_each}, 
		#{sale_usable}, #{soldout_usable}, #{product_detail}, now())
	</insert>
	
	<insert id="saveProductImageMapper" parameterType="model.ProductFileEntity">
		INSERT INTO product_file VALUES
		('0', #{product_code}, #{product_image1}, #{product_image1_name},
		#{product_image2},#{product_image2_name},#{product_image3},#{product_image3_name},now())
	</insert>
	
	<select id="getProductMapper" resultType="Map">
		SELECT * FROM product WHERE admin_id=#{id} order by idx_product desc
	</select>
	
	<select id="getProductFilePath" resultType="Map">
		SELECT product_image1, product_image2, product_image3 from product_file where product_code IN
		<foreach item="product_code" collection="list" open="(" separator="," close=")">
			#{product_code}
		</foreach>
	</select>
	
	<select id="getProductImageMapper" resultType="String">
		SELECT product_image1 FROM product_file WHERE product_code = #{product_code} AND product_image1 IS NOT NULL
	    UNION ALL
	    SELECT product_image2 FROM product_file WHERE product_code = #{product_code} AND product_image2 IS NOT NULL
	    UNION ALL
	    SELECT product_image3 FROM product_file WHERE product_code = #{product_code} AND product_image3 IS NOT NULL
	</select>
	
	<delete id="deleteProductImageMapper">
		DELETE FROM product_file WHERE product_code IN
		<foreach item="product_code" collection="list" open="(" separator="," close=")">
			#{product_code}
		</foreach>
	</delete>
	
	<delete id="deleteProductMapper">
		DELETE FROM product WHERE product_code IN
		<foreach item="product_code" collection="list" open="(" separator="," close=")">
			#{product_code}
		</foreach>
	</delete>
	
	<select id="getCategoryCountMapper" resultType="int">
        SELECT COUNT(*)
        FROM category
        WHERE admin_id = #{id}
        <if test="search != null and search != ''">
	   		AND menu_name LIKE CONCAT('%', #{search}, '%')
	  	</if>
    </select>
</mapper>
